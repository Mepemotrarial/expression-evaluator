package com.meppy.expression;

import java.text.DateFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.time.Duration;
import java.util.Date;
import java.util.Locale;
import java.util.Random;

/**
 * Provides the implementation of all functions available in expressions.
 */
final class Functions {
    private static final String ARGUMENT_IS_NOT_A_NUMBER = "The specified argument cannot be represented as a number.";

    /**
     * The locale associated with this object.
     */
    private final Locale locale;
    private final NumberFormat numberFormat;
    private final DateFormat dateFormat;

    /**
     * The most recent random number generated by the rnd function.
     */
    private double lastRandomNumber;

    /**
     * A random number generator.
     */
    private final Random random;

    /**
     * Initializes a new instance of the {@link Functions} class.
     */
    Functions(Locale locale) {
        this.locale = locale;
        numberFormat = NumberFormat.getInstance(locale);
        dateFormat = DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, locale);
        this.random = new Random(System.currentTimeMillis());
        this.lastRandomNumber = random.nextDouble();
    }

    /**
     * Returns the current system date and time.
     */
    Date now() {
        return new Date();
    }

    /**
     * Represents the natural logarithmic base, specified by the constant, e.
     */
    double e() {
        return Math.E;
    }

    /**
     * Represents the ratio of the circumference of a circle to its diameter, specified by the constant, n.
     */
    double pi() {
        return Math.PI;
    }

    /**
     * Returns the current system date.
     */
    Date today() {
        long now = new Date().getTime();
        return new Date(now - now % Duration.ofDays(1).toMillis());
    }

    /**
     * Returns the absolute value of the specified double-precision floating-point number.
     */
    double abs(double value) {
        return Math.abs(value);
    }

    /**
     * Returns an Integer representing the character code corresponding to the first letter in a string.
     */
    int asc(String value) {
        if (StringUtils.isNullOrEmpty(value)) {
            return -1;
        }

        return (int) value.charAt(0);
    }

    /**
     * Returns the angle, measured in radians, whose tangent is the specified number.
     */
    double atn(double value) {
        return Math.atan(value);
    }

    /**
     * Returns a String containing the character associated with the specified character code.
     */
    String chr(int c) {
        return StringUtils.newString((char)c, 1);
    }

    /**
     * Converts the specified object to a boolean.
     */
    boolean cbool(Object value) {
        return getBool(value);
    }

    /**
     * Converts the specified object to a {@link Date}.
     */
    Date cdate(Object value) {
        return getDate(value);
    }

    /**
     * Converts the specified object to a double.
     */
    double cdbl(Object value) {
        try {
            return getDouble(value);
        } catch (ParseException | IllegalArgumentException ex) {
            return 0;
        }
    }

    /**
     * Converts the specified object to an integer.
     */
    int cint(Object value) {
        try {
            return getInt(value);
        } catch (ParseException | IllegalArgumentException ex) {
            return 0;
        }
    }

    /**
     * Converts the specified object to a long.
     */
    long clong(Object value) {
        try {
            return getLong(value);
        } catch (ParseException | IllegalArgumentException ex) {
            return 0;
        }
    }

    /**
     * Converts the specified object to a float.
     */
    float csng(Object value) {
        try {
            return (float) getDouble(value);
        } catch (ParseException | IllegalArgumentException ex) {
            return 0;
        }
    }

    /**
     * Converts the specified object to a string.
     */
    String cstr(Object value) {
        return getString(value);
    }

    /**
     * Returns the cosine of the specified angle.
     */
    double cos(double value) {
        return Math.cos(value);
    }

    /**
     * Returns the angle whose cosine is the specified number.
     */
    double acos(double value) {
        return Math.acos(value);
    }

    /**
     * Returns e raised to the specified power.
     */
    double exp(double value) {
        return Math.exp(value);
    }

    /**
     * Returns the integer portion of the specified number.
     */
    int integer(double value) {
        return (int)Math.floor(value);
    }

    /**
     * Returns a boolean value indicating whether the specified value is null.
     */
    boolean isNull(Object value) {
        return value == null;
    }

    /**
     * Returns a boolean value indicating whether the specified object can be converted to a number.
     */
    boolean isNumeric(Object value) {
        try {
            getDouble(value);
        } catch (ParseException | IllegalArgumentException ex) {
            return false;
        }

        return true;
    }

    /**
     * Returns the specified string converted to lowercase.
     */
    String lcase(String value) {
        if (value == null) {
            return null;
        }

        return value.toLowerCase(locale);
    }

    /**
     * Returns the number of characters in the specified string.
     */
    int len(String value) {
        if (value == null) {
            return 0;
        }

        return value.length();
    }

    /**
     * Returns the natural (base e) logarithm of the specified value.
     */
    double log(double value) {
        return Math.log(value);
    }

    /**
     * Returns a specified number raised to the specified power.
     */
    double pow(double value, double power) {
        return Math.pow(value, power);
    }

    /**
     * Returns a value containing a random number.
     */
    double rnd(int type) {
        if (type < 0) {
            return new Random(type).nextDouble();
        }

        if (type == 0) {
            return lastRandomNumber;
        }

        lastRandomNumber = random.nextDouble();

        return lastRandomNumber;
    }

    /**
     * Returns a value indicating the sign of the specified number.
     */
    double sgn(double value) {
        return Math.signum(value);
    }

    /**
     * Returns the sine of the specified angle.
     */
    double sin(double value) {
        return Math.sin(value);
    }

    /**
     * Returns the angle whose sine is the specified number.
     */
    double asin(double value) {
        return Math.asin(value);
    }

    /**
     * Returns a string consisting of the specified number of spaces.
     */
    String space(int count) {
        return StringUtils.newString(' ', count);
    }

    /**
     * Returns a double specifying the square root of a number.
     */
    double sqr(double value) {
        return Math.sqrt(value);
    }

    /**
     * Returns a double specifying the square root of a number.
     */
    double sqrt(double value) {
        return Math.sqrt(value);
    }

    /**
     * Returns a string representation of the specified number.
     */
    String str(double value) {
        return numberFormat.format(value);
    }

    /**
     * Returns a string in which the character order of the specified string is reversed.
     */
    String strReverse(String value) {
        if (value == null) {
            return null;
        }

        char[] chars = value.toCharArray();
        for (int i = 0; i < chars.length / 2; i++) {
            char c = chars[i];
            chars[i] = chars[chars.length - i - 1];
            chars[chars.length - i - 1] = c;
        }

        return new String(chars);
    }

    /**
     * Returns the tangent of the specified angle.
     */
    double tan(double value) {
        return Math.tan(value);
    }

    /**
     * Returns a string containing a copy of the specified string without leading and trailing spaces.
     */
    String trim(String value) {
        if (value == null) {
            return null;
        }

        return value.trim();
    }

    /**
     * Returns the specified string converted to uppercase.
     */
    String ucase(String value) {
        if (value == null) {
            return null;
        }

        return value.toUpperCase(locale);
    }

    /**
     * Returns an integer specifying the position of the first occurrence of one string within another.
     */
    int inStr(String a, String b) {
        if (StringUtils.isNullOrEmpty(a) || StringUtils.isNullOrEmpty(b))
            return -1;

        return a.indexOf(b);
    }

    /**
     * Returns an integer specifying the position of the last occurrence of one string within another.
     */
    int inStrRev(String a, String b) {
        if (StringUtils.isNullOrEmpty(a) || StringUtils.isNullOrEmpty(b))
            return -1;

        return a.lastIndexOf(b);
    }

    /**
     * Returns a string containing the specified number of characters from the left side of the specified string.
     */
    String left(String a, int length) {
        if (a == null) {
            return null;
        }

        if (length > a.length()) {
            return a;
        } else {
            return a.substring(0, length);
        }
    }

    /**
     * Returns a string containing the specified number of characters from the right side of the specified string.
     */
    String right(String a, int length) {
        if (length > a.length()) {
            return a;
        } else {
            return a.substring(a.length() - length);
        }
    }

    /**
     * Rounds the specified value to the specified precision.
     */
    double round(double value) {
        return Math.round(value);
    }

    /**
     * Returns an integer indicating the result of the comparison of the specified strings.
     */
    int strComp(String a, String b) {
        return a.compareTo(b);
    }

    /**
     * Returns a string containing the specified character repeating the specified number of times.
     */
    String string(int count, int c) {
        return StringUtils.newString((char)c, count);
    }

    /**
     * Returns one of two parts, depending on the value of the specified condition.
     */
    Object iif(boolean condition, Object a, Object b) {
        return condition ? a : b;
    }

    /**
     * Returns a string containing the specified number of characters from the specified string.
     */
    String mid(String value, int pos, int length) {
        if (value == null) {
            return null;
        }

        if (pos > value.length()) {
            return "";
        }

        if (pos + length > value.length()) {
            return value.substring(pos);
        }

        return value.substring(pos, pos + length);
    }

    /**
     * Returns a string in which the specified substring has been replaced with another substring.
     */
    String replace(String value, String oldValue, String newValue) {
        if (value == null || oldValue == null || newValue == null) {
            return null;
        }

        return value.replace(oldValue, newValue);
    }

    /**
     * Returns the specified value as a date.
     */
    private Date getDate(Object value) {
        if (value instanceof Date) {
            return (Date) value;
        }

        String stringValue = getString(value);
        try {
            return dateFormat.parse(stringValue);
        } catch (ParseException ex) {
            // Ignore exception
        }

        try {
            long longValue = getLong(value);
            return new Date(longValue);
        } catch (ParseException | IllegalArgumentException ex) {
            // Ignore exceptions
        }

        throw new IllegalArgumentException("The specified argument cannot be represented as a date.");
    }

    /**
     * Returns the specified value as a boolean.
     */
    private boolean getBool(Object value) {
        if (value instanceof Boolean) {
            return (Boolean) value;
        }

        // Check if it is a number
        try {
            int intValue = getInt(value);
            return intValue != 0;
        } catch (ParseException ex) {
            // Ignore exception
        }

        // Check if it is a string that can be parsed
        String stringValue = getString(value);
        return Boolean.parseBoolean(stringValue);
    }

    /**
     * Returns the specified value as an integer.
     */
    private int getInt(Object value) throws ParseException {
        if (value instanceof Number) {
            return ((Number) value).intValue();
        } else if (value instanceof String) {
            return numberFormat.parse((String) value).intValue();
        }

        throw new IllegalArgumentException(ARGUMENT_IS_NOT_A_NUMBER);
    }

    /**
     * Returns the specified value as a long.
     */
    private long getLong(Object value) throws ParseException {
        if (value instanceof Number) {
            return ((Number) value).longValue();
        } else if (value instanceof String) {
            return numberFormat.parse((String) value).longValue();
        }

        throw new IllegalArgumentException(ARGUMENT_IS_NOT_A_NUMBER);
    }

    /**
     * Returns the specified value as a double.
     */
    private double getDouble(Object value) throws ParseException {
        if (value instanceof Number) {
            return ((Number) value).doubleValue();
        } else if (value instanceof String) {
            return numberFormat.parse((String) value).doubleValue();
        }

        throw new IllegalArgumentException(ARGUMENT_IS_NOT_A_NUMBER);
    }

    /**
     * Returns the specified value as a string.
     */
    private String getString(Object value) {
        if (value == null) {
            return "";
        }

        if (value instanceof Double) {
            return numberFormat.format(((Double)value).doubleValue());
        } else if (value instanceof Float) {
            return numberFormat.format(((Float)value).doubleValue());
        } else if (value instanceof Number) {
            return numberFormat.format(((Number)value).longValue());
        } else if (value instanceof Date) {
            return dateFormat.format((Date)value);
        }

        return value.toString();
    }

    /**
     * Returns the type of the specified value.
     */
    Class<?> typeOf(Object value) {
        if (value == null) {
            return null;
        }

        return value.getClass();
    }
}